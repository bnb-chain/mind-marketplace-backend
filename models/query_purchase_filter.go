// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryPurchaseFilter query purchase filter
//
// swagger:model QueryPurchaseFilter
type QueryPurchaseFilter struct {

	// account address
	// Example: 0x0BAC492386862aD3dF4B666Bc096b0505BB694Da
	// Min Length: 1
	Address string `json:"address,omitempty"`

	// bucket ids, the priority itemIds > bucketIds > objectIds
	// Example: [1,2,3]
	// Max Items: 10
	// Min Items: 1
	BucketIds []int64 `json:"bucketIds"`

	// item ids, the priority itemIds > bucketIds > objectIds
	// Example: [1,2,3]
	// Max Items: 10
	// Min Items: 1
	ItemIds []int64 `json:"itemIds"`

	// object ids, the priority itemIds > bucketIds > objectIds
	// Example: [1,2,3]
	// Max Items: 10
	// Min Items: 1
	ObjectIds []int64 `json:"objectIds"`
}

// Validate validates this query purchase filter
func (m *QueryPurchaseFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucketIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryPurchaseFilter) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if err := validate.MinLength("address", "body", m.Address, 1); err != nil {
		return err
	}

	return nil
}

func (m *QueryPurchaseFilter) validateBucketIds(formats strfmt.Registry) error {
	if swag.IsZero(m.BucketIds) { // not required
		return nil
	}

	iBucketIdsSize := int64(len(m.BucketIds))

	if err := validate.MinItems("bucketIds", "body", iBucketIdsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("bucketIds", "body", iBucketIdsSize, 10); err != nil {
		return err
	}

	return nil
}

func (m *QueryPurchaseFilter) validateItemIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemIds) { // not required
		return nil
	}

	iItemIdsSize := int64(len(m.ItemIds))

	if err := validate.MinItems("itemIds", "body", iItemIdsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("itemIds", "body", iItemIdsSize, 10); err != nil {
		return err
	}

	return nil
}

func (m *QueryPurchaseFilter) validateObjectIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectIds) { // not required
		return nil
	}

	iObjectIdsSize := int64(len(m.ObjectIds))

	if err := validate.MinItems("objectIds", "body", iObjectIdsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("objectIds", "body", iObjectIdsSize, 10); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query purchase filter based on context it is used
func (m *QueryPurchaseFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueryPurchaseFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryPurchaseFilter) UnmarshalBinary(b []byte) error {
	var res QueryPurchaseFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
