// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Account account
//
// swagger:model Account
type Account struct {

	// account address
	// Example: 0x0BAC492386862aD3dF4B666Bc096b0505BB694Da
	// Required: true
	Address *string `json:"address"`

	// avatar url
	// Example: https://greengfield.sp.com/mypublicbucket/avatar.jpg
	Avatar string `json:"avatar,omitempty"`

	// create at,unix timestamp
	// Example: 1654171400
	CreatedAt int64 `json:"createdAt,omitempty"`

	// id
	// Example: 100
	// Required: true
	ID *int64 `json:"id"`

	// instagram name
	// Example: justdoit
	InstagramUserName string `json:"instagramUserName,omitempty"`

	// whether instagram account is verified
	// Example: true
	InstagramVerified bool `json:"instagramVerified,omitempty"`

	// twitter user name
	// Example: jsutdoit
	TwitterUserName string `json:"twitterUserName,omitempty"`

	// whether twitter account is verified
	// Example: true
	TwitterVerified bool `json:"twitterVerified,omitempty"`

	// user name
	// Example: jack
	UserName string `json:"userName,omitempty"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this account based on context it is used
func (m *Account) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
