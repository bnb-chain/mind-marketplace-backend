// Code generated by go-swagger; DO NOT EDIT.

package item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bnb-chain/mind-marketplace-backend/models"
)

// GetItemByObjectsOKCode is the HTTP code returned for type GetItemByObjectsOK
const GetItemByObjectsOKCode int = 200

/*GetItemByObjectsOK successful operation

swagger:response getItemByObjectsOK
*/
type GetItemByObjectsOK struct {

	/*
	  In: Body
	*/
	Payload *models.BatchItemResponse `json:"body,omitempty"`
}

// NewGetItemByObjectsOK creates GetItemByObjectsOK with default headers values
func NewGetItemByObjectsOK() *GetItemByObjectsOK {

	return &GetItemByObjectsOK{}
}

// WithPayload adds the payload to the get item by objects o k response
func (o *GetItemByObjectsOK) WithPayload(payload *models.BatchItemResponse) *GetItemByObjectsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get item by objects o k response
func (o *GetItemByObjectsOK) SetPayload(payload *models.BatchItemResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetItemByObjectsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetItemByObjectsBadRequestCode is the HTTP code returned for type GetItemByObjectsBadRequest
const GetItemByObjectsBadRequestCode int = 400

/*GetItemByObjectsBadRequest Bad Request

swagger:response getItemByObjectsBadRequest
*/
type GetItemByObjectsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetItemByObjectsBadRequest creates GetItemByObjectsBadRequest with default headers values
func NewGetItemByObjectsBadRequest() *GetItemByObjectsBadRequest {

	return &GetItemByObjectsBadRequest{}
}

// WithPayload adds the payload to the get item by objects bad request response
func (o *GetItemByObjectsBadRequest) WithPayload(payload *models.Error) *GetItemByObjectsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get item by objects bad request response
func (o *GetItemByObjectsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetItemByObjectsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetItemByObjectsInternalServerErrorCode is the HTTP code returned for type GetItemByObjectsInternalServerError
const GetItemByObjectsInternalServerErrorCode int = 500

/*GetItemByObjectsInternalServerError internal server error

swagger:response getItemByObjectsInternalServerError
*/
type GetItemByObjectsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetItemByObjectsInternalServerError creates GetItemByObjectsInternalServerError with default headers values
func NewGetItemByObjectsInternalServerError() *GetItemByObjectsInternalServerError {

	return &GetItemByObjectsInternalServerError{}
}

// WithPayload adds the payload to the get item by objects internal server error response
func (o *GetItemByObjectsInternalServerError) WithPayload(payload *models.Error) *GetItemByObjectsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get item by objects internal server error response
func (o *GetItemByObjectsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetItemByObjectsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
