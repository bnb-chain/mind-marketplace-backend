// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Swagger document for data marketplace apis.",
    "title": "Data Marketplace",
    "version": "1.0.0"
  },
  "host": "gnfd-testnet-marketplace.bnbchain.org",
  "basePath": "/v1",
  "paths": {
    "/account/update": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Update account",
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/{address}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Get account",
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "account address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/batch": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get items in batch",
        "operationId": "batchItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get all item categories",
        "operationId": "getCategory",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListCategoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Search item",
        "operationId": "searchItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PageItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/{itemId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item",
        "operationId": "getItem",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "id of item",
            "name": "itemId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item_by_bucket/{bucketId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item by bucket",
        "operationId": "getItemByBucket",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "bucket id",
            "name": "bucketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item_by_group/{groupId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item by group",
        "operationId": "getItemByGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "group id",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item_by_object/{objectId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item by object",
        "operationId": "getItemByObject",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "object id",
            "name": "objectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purchase/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "purchase"
        ],
        "summary": "Search purchase",
        "operationId": "searchPurchase",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchPurchaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PagePurchaseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purchase/{purchaseId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "purchase"
        ],
        "summary": "Get purchase",
        "operationId": "getPurchase",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "description": "purchase id",
            "name": "purchaseId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PurchaseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "id",
        "address"
      ],
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "avatar": {
          "description": "avatar url",
          "type": "string",
          "example": "https://greengfield.sp.com/mypublicbucket/avatar.jpg"
        },
        "createdAt": {
          "description": "create at,unix timestamp",
          "type": "integer",
          "format": "int64",
          "example": 1654171400
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "instagramUserName": {
          "description": "instagram name",
          "type": "string",
          "example": "justdoit"
        },
        "instagramVerified": {
          "description": "whether instagram account is verified",
          "type": "boolean",
          "example": "true"
        },
        "twitterUserName": {
          "description": "twitter user name",
          "type": "string",
          "example": "jsutdoit"
        },
        "twitterVerified": {
          "description": "whether twitter account is verified",
          "type": "boolean",
          "example": "true"
        },
        "userName": {
          "description": "user name",
          "type": "string",
          "example": "jack"
        }
      }
    },
    "AccountResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "BatchItemRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "description": "item ids",
          "type": "array",
          "maxItems": 10,
          "minItems": 1,
          "items": {
            "type": "integer"
          },
          "example": [
            1,
            2,
            3
          ]
        }
      }
    },
    "BatchItemResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int",
          "example": 1
        },
        "name": {
          "description": "name",
          "type": "string",
          "example": "Art"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "http error",
          "type": "integer",
          "format": "int64",
          "example": "400/500"
        },
        "message": {
          "description": "error message",
          "type": "string",
          "example": "bad request/internal server error"
        }
      }
    },
    "Item": {
      "type": "object",
      "required": [
        "id",
        "type",
        "name"
      ],
      "properties": {
        "categoryId": {
          "description": "category id",
          "type": "integer",
          "format": "int",
          "example": 1
        },
        "createdAt": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "format": "int64",
          "example": 1654173249
        },
        "description": {
          "description": "description",
          "type": "string",
          "example": "this is a crypto cat"
        },
        "groupId": {
          "description": "group id",
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "groupName": {
          "description": "name of the group",
          "type": "string",
          "example": "group_abc"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "name": {
          "description": "bucket or object name",
          "type": "string",
          "example": "helloworld"
        },
        "ownerAddress": {
          "description": "address of the owner",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "price": {
          "description": "price",
          "x-go-type": {
            "import": {
              "package": "github.com/bnb-chain/mind-marketplace-backend/util"
            },
            "type": "Decimal"
          },
          "example": 12.34
        },
        "resourceId": {
          "description": "bucket or object id",
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": [
            "PENDING",
            "LISTED",
            "BLOCKED"
          ]
        },
        "totalSale": {
          "description": "all time trade times",
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "totalVolume": {
          "description": "all time trade volume, in wei unit",
          "x-go-type": {
            "import": {
              "package": "github.com/bnb-chain/mind-marketplace-backend/util"
            },
            "type": "Decimal"
          },
          "example": 290.68
        },
        "type": {
          "description": "type",
          "type": "string",
          "enum": [
            "COLLECTION",
            "OBJECT"
          ]
        },
        "url": {
          "description": "url for image",
          "type": "string",
          "example": "http://www.xx.xxx/xx.jpg"
        }
      }
    },
    "ItemFilter": {
      "type": "object",
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "minLength": 1,
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "categoryId": {
          "description": "id of category",
          "type": "integer",
          "minLength": 1,
          "example": 1
        },
        "keyword": {
          "description": "search keyword",
          "type": "string",
          "minLength": 1,
          "example": "panda"
        }
      }
    },
    "ItemResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "item": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "ListCategoryResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "PageItemResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            },
            "total": {
              "description": "total",
              "type": "integer",
              "format": "int64",
              "x-omitempty": false,
              "example": 1000
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "PagePurchaseResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "purchases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Purchase"
              }
            },
            "total": {
              "description": "total",
              "type": "integer",
              "format": "int64",
              "x-omitempty": false,
              "example": 1000
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "Purchase": {
      "type": "object",
      "required": [
        "id",
        "buyerAddress"
      ],
      "properties": {
        "buyerAddress": {
          "description": "account address",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "createdAt": {
          "description": "created at,unix timestamp",
          "type": "integer",
          "format": "int64",
          "example": 1654176354
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "price": {
          "description": "price",
          "x-go-type": {
            "import": {
              "package": "github.com/bnb-chain/mind-marketplace-backend/util"
            },
            "type": "Decimal"
          },
          "example": 12.34
        }
      }
    },
    "PurchaseFilter": {
      "type": "object",
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "minLength": 1,
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "bucketId": {
          "description": "bucket id, the priority itemId \u003e bucketId \u003e objectId",
          "type": "integer",
          "minLength": 1,
          "example": 100
        },
        "itemId": {
          "description": "item id, the priority itemId \u003e bucketId \u003e objectId",
          "type": "integer",
          "minLength": 1,
          "example": 100
        },
        "objectId": {
          "description": "object id, the priority itemId \u003e bucketId \u003e objectId",
          "type": "integer",
          "minLength": 1,
          "example": 100
        }
      }
    },
    "PurchaseResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "purchase": {
              "$ref": "#/definitions/Purchase"
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "SearchItemRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "description": "filter",
          "$ref": "#/definitions/ItemFilter"
        },
        "limit": {
          "description": "limit",
          "type": "integer",
          "format": "int64",
          "default": 10,
          "maximum": 20,
          "minimum": 1
        },
        "offset": {
          "description": "offset",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "sort": {
          "description": "sort",
          "type": "string",
          "default": "CREATION_DESC",
          "enum": [
            "CREATION_ASC",
            "CREATION_DESC",
            "TOTAL_VOLUME_ASC",
            "TOTAL_VOLUME_DESC",
            "TOTAL_SALE_ASC",
            "TOTAL_SALE_DESC"
          ]
        }
      }
    },
    "SearchPurchaseRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "description": "filter",
          "$ref": "#/definitions/PurchaseFilter"
        },
        "limit": {
          "description": "limit",
          "type": "integer",
          "format": "int64",
          "default": 10,
          "maximum": 20,
          "minimum": 1
        },
        "offset": {
          "description": "offset",
          "type": "integer",
          "format": "int64",
          "default": 0
        },
        "sort": {
          "description": "sort",
          "type": "string",
          "default": "CREATION_DESC",
          "enum": [
            "CREATION_ASC",
            "CREATION_DESC",
            "PRICE_ASC",
            "PRICE_DESC"
          ]
        }
      }
    },
    "UpdateAccountRequest": {
      "type": "object",
      "required": [
        "address",
        "timestamp",
        "signature"
      ],
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "avatar": {
          "description": "url of avatar",
          "type": "string",
          "maxLength": 256,
          "example": "https://www.xxx.xyz/abc.jpg"
        },
        "bio": {
          "description": "self description",
          "type": "string",
          "maxLength": 1024,
          "example": "interested in web3"
        },
        "instagramUserName": {
          "description": "instagram user name",
          "type": "string",
          "maxLength": 256,
          "minLength": 3,
          "example": "justdoit"
        },
        "signature": {
          "description": "signed signature, format ` + "`" + `{address}_update_account_{timestamp}` + "`" + `, for more: https://docs.metamask.io/wallet/how-to/sign-data/",
          "type": "string",
          "example": "b6c68a22f98c5f37347f7e2d4dc6ee48df31d5b86ef123d984969432f14c9a970283a157ef260b6341215b76764a1d5d4b29379fc50359164b53c2ce16d4cbd7"
        },
        "timestamp": {
          "description": "unix timestamp",
          "type": "integer",
          "example": 1654171400
        },
        "twitterUserName": {
          "description": "twitter user name",
          "type": "string",
          "maxLength": 256,
          "minLength": 3,
          "example": "jsutdoit"
        },
        "userName": {
          "description": "user name",
          "type": "string",
          "maxLength": 32,
          "example": "jack"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Access to marketplace users",
      "name": "account"
    },
    {
      "description": "Access to marketplace collections and objects",
      "name": "item"
    },
    {
      "description": "Access to marketplace purchases",
      "name": "purchase"
    }
  ],
  "externalDocs": {
    "description": "Find out more about data marketplace",
    "url": "http://tobe.added"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Swagger document for data marketplace apis.",
    "title": "Data Marketplace",
    "version": "1.0.0"
  },
  "host": "gnfd-testnet-marketplace.bnbchain.org",
  "basePath": "/v1",
  "paths": {
    "/account/update": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Update account",
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/{address}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "account"
        ],
        "summary": "Get account",
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "account address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AccountResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/batch": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get items in batch",
        "operationId": "batchItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BatchItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get all item categories",
        "operationId": "getCategory",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListCategoryResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Search item",
        "operationId": "searchItem",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PageItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item/{itemId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item",
        "operationId": "getItem",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "id of item",
            "name": "itemId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item_by_bucket/{bucketId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item by bucket",
        "operationId": "getItemByBucket",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "bucket id",
            "name": "bucketId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item_by_group/{groupId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item by group",
        "operationId": "getItemByGroup",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "group id",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/item_by_object/{objectId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "item"
        ],
        "summary": "Get item by object",
        "operationId": "getItemByObject",
        "parameters": [
          {
            "minLength": 1,
            "type": "integer",
            "format": "int64",
            "description": "object id",
            "name": "objectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purchase/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "purchase"
        ],
        "summary": "Search purchase",
        "operationId": "searchPurchase",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchPurchaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PagePurchaseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purchase/{purchaseId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "purchase"
        ],
        "summary": "Get purchase",
        "operationId": "getPurchase",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "description": "purchase id",
            "name": "purchaseId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PurchaseResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "id",
        "address"
      ],
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "avatar": {
          "description": "avatar url",
          "type": "string",
          "example": "https://greengfield.sp.com/mypublicbucket/avatar.jpg"
        },
        "createdAt": {
          "description": "create at,unix timestamp",
          "type": "integer",
          "format": "int64",
          "example": 1654171400
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "instagramUserName": {
          "description": "instagram name",
          "type": "string",
          "example": "justdoit"
        },
        "instagramVerified": {
          "description": "whether instagram account is verified",
          "type": "boolean",
          "example": "true"
        },
        "twitterUserName": {
          "description": "twitter user name",
          "type": "string",
          "example": "jsutdoit"
        },
        "twitterVerified": {
          "description": "whether twitter account is verified",
          "type": "boolean",
          "example": "true"
        },
        "userName": {
          "description": "user name",
          "type": "string",
          "example": "jack"
        }
      }
    },
    "AccountResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "account": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "AccountResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        }
      }
    },
    "BatchItemRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "description": "item ids",
          "type": "array",
          "maxItems": 10,
          "minItems": 1,
          "items": {
            "type": "integer"
          },
          "example": [
            1,
            2,
            3
          ]
        }
      }
    },
    "BatchItemResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "BatchItemResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int",
          "example": 1
        },
        "name": {
          "description": "name",
          "type": "string",
          "example": "Art"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "http error",
          "type": "integer",
          "format": "int64",
          "example": "400/500"
        },
        "message": {
          "description": "error message",
          "type": "string",
          "example": "bad request/internal server error"
        }
      }
    },
    "Item": {
      "type": "object",
      "required": [
        "id",
        "type",
        "name"
      ],
      "properties": {
        "categoryId": {
          "description": "category id",
          "type": "integer",
          "format": "int",
          "example": 1
        },
        "createdAt": {
          "description": "create at, unix timestamp",
          "type": "integer",
          "format": "int64",
          "example": 1654173249
        },
        "description": {
          "description": "description",
          "type": "string",
          "example": "this is a crypto cat"
        },
        "groupId": {
          "description": "group id",
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "groupName": {
          "description": "name of the group",
          "type": "string",
          "example": "group_abc"
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "name": {
          "description": "bucket or object name",
          "type": "string",
          "example": "helloworld"
        },
        "ownerAddress": {
          "description": "address of the owner",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "price": {
          "description": "price",
          "x-go-type": {
            "import": {
              "package": "github.com/bnb-chain/mind-marketplace-backend/util"
            },
            "type": "Decimal"
          },
          "example": 12.34
        },
        "resourceId": {
          "description": "bucket or object id",
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": [
            "PENDING",
            "LISTED",
            "BLOCKED"
          ]
        },
        "totalSale": {
          "description": "all time trade times",
          "type": "integer",
          "format": "int64",
          "example": 10
        },
        "totalVolume": {
          "description": "all time trade volume, in wei unit",
          "x-go-type": {
            "import": {
              "package": "github.com/bnb-chain/mind-marketplace-backend/util"
            },
            "type": "Decimal"
          },
          "example": 290.68
        },
        "type": {
          "description": "type",
          "type": "string",
          "enum": [
            "COLLECTION",
            "OBJECT"
          ]
        },
        "url": {
          "description": "url for image",
          "type": "string",
          "example": "http://www.xx.xxx/xx.jpg"
        }
      }
    },
    "ItemFilter": {
      "type": "object",
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "minLength": 1,
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "categoryId": {
          "description": "id of category",
          "type": "integer",
          "minLength": 1,
          "example": 1
        },
        "keyword": {
          "description": "search keyword",
          "type": "string",
          "minLength": 1,
          "example": "panda"
        }
      }
    },
    "ItemResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "item": {
              "$ref": "#/definitions/Item"
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "ItemResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/Item"
        }
      }
    },
    "ListCategoryResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "ListCategoryResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        }
      }
    },
    "PageItemResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            },
            "total": {
              "description": "total",
              "type": "integer",
              "format": "int64",
              "x-omitempty": false,
              "example": 1000
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "PageItemResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "total": {
          "description": "total",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false,
          "example": 1000
        }
      }
    },
    "PagePurchaseResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "purchases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Purchase"
              }
            },
            "total": {
              "description": "total",
              "type": "integer",
              "format": "int64",
              "x-omitempty": false,
              "example": 1000
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "PagePurchaseResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "purchases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Purchase"
          }
        },
        "total": {
          "description": "total",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false,
          "example": 1000
        }
      }
    },
    "Purchase": {
      "type": "object",
      "required": [
        "id",
        "buyerAddress"
      ],
      "properties": {
        "buyerAddress": {
          "description": "account address",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "createdAt": {
          "description": "created at,unix timestamp",
          "type": "integer",
          "format": "int64",
          "example": 1654176354
        },
        "id": {
          "description": "id",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "item": {
          "$ref": "#/definitions/Item"
        },
        "price": {
          "description": "price",
          "x-go-type": {
            "import": {
              "package": "github.com/bnb-chain/mind-marketplace-backend/util"
            },
            "type": "Decimal"
          },
          "example": 12.34
        }
      }
    },
    "PurchaseFilter": {
      "type": "object",
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "minLength": 1,
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "bucketId": {
          "description": "bucket id, the priority itemId \u003e bucketId \u003e objectId",
          "type": "integer",
          "minLength": 1,
          "example": 100
        },
        "itemId": {
          "description": "item id, the priority itemId \u003e bucketId \u003e objectId",
          "type": "integer",
          "minLength": 1,
          "example": 100
        },
        "objectId": {
          "description": "object id, the priority itemId \u003e bucketId \u003e objectId",
          "type": "integer",
          "minLength": 1,
          "example": 100
        }
      }
    },
    "PurchaseResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "code defined by api, not equal to http code",
          "type": "integer",
          "example": 2000
        },
        "data": {
          "description": "actual data for request",
          "type": "object",
          "properties": {
            "purchase": {
              "$ref": "#/definitions/Purchase"
            }
          }
        },
        "message": {
          "description": "error message if there is error",
          "type": "string",
          "example": "signature invalid"
        }
      }
    },
    "PurchaseResponseData": {
      "description": "actual data for request",
      "type": "object",
      "properties": {
        "purchase": {
          "$ref": "#/definitions/Purchase"
        }
      }
    },
    "SearchItemRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "description": "filter",
          "$ref": "#/definitions/ItemFilter"
        },
        "limit": {
          "description": "limit",
          "type": "integer",
          "format": "int64",
          "default": 10,
          "maximum": 20,
          "minimum": 1
        },
        "offset": {
          "description": "offset",
          "type": "integer",
          "format": "int64",
          "default": 0,
          "minimum": 0
        },
        "sort": {
          "description": "sort",
          "type": "string",
          "default": "CREATION_DESC",
          "enum": [
            "CREATION_ASC",
            "CREATION_DESC",
            "TOTAL_VOLUME_ASC",
            "TOTAL_VOLUME_DESC",
            "TOTAL_SALE_ASC",
            "TOTAL_SALE_DESC"
          ]
        }
      }
    },
    "SearchPurchaseRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "description": "filter",
          "$ref": "#/definitions/PurchaseFilter"
        },
        "limit": {
          "description": "limit",
          "type": "integer",
          "format": "int64",
          "default": 10,
          "maximum": 20,
          "minimum": 1
        },
        "offset": {
          "description": "offset",
          "type": "integer",
          "format": "int64",
          "default": 0,
          "minimum": 0
        },
        "sort": {
          "description": "sort",
          "type": "string",
          "default": "CREATION_DESC",
          "enum": [
            "CREATION_ASC",
            "CREATION_DESC",
            "PRICE_ASC",
            "PRICE_DESC"
          ]
        }
      }
    },
    "UpdateAccountRequest": {
      "type": "object",
      "required": [
        "address",
        "timestamp",
        "signature"
      ],
      "properties": {
        "address": {
          "description": "account address",
          "type": "string",
          "example": "0x0BAC492386862aD3dF4B666Bc096b0505BB694Da"
        },
        "avatar": {
          "description": "url of avatar",
          "type": "string",
          "maxLength": 256,
          "minLength": 0,
          "example": "https://www.xxx.xyz/abc.jpg"
        },
        "bio": {
          "description": "self description",
          "type": "string",
          "maxLength": 1024,
          "minLength": 0,
          "example": "interested in web3"
        },
        "instagramUserName": {
          "description": "instagram user name",
          "type": "string",
          "maxLength": 256,
          "minLength": 3,
          "example": "justdoit"
        },
        "signature": {
          "description": "signed signature, format ` + "`" + `{address}_update_account_{timestamp}` + "`" + `, for more: https://docs.metamask.io/wallet/how-to/sign-data/",
          "type": "string",
          "example": "b6c68a22f98c5f37347f7e2d4dc6ee48df31d5b86ef123d984969432f14c9a970283a157ef260b6341215b76764a1d5d4b29379fc50359164b53c2ce16d4cbd7"
        },
        "timestamp": {
          "description": "unix timestamp",
          "type": "integer",
          "example": 1654171400
        },
        "twitterUserName": {
          "description": "twitter user name",
          "type": "string",
          "maxLength": 256,
          "minLength": 3,
          "example": "jsutdoit"
        },
        "userName": {
          "description": "user name",
          "type": "string",
          "maxLength": 32,
          "minLength": 0,
          "example": "jack"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Access to marketplace users",
      "name": "account"
    },
    {
      "description": "Access to marketplace collections and objects",
      "name": "item"
    },
    {
      "description": "Access to marketplace purchases",
      "name": "purchase"
    }
  ],
  "externalDocs": {
    "description": "Find out more about data marketplace",
    "url": "http://tobe.added"
  }
}`))
}
