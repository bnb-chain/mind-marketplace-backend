// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/bnb-chain/greenfield-data-marketplace-backend/util"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item item
//
// swagger:model Item
type Item struct {

	// create at, unix timestamp
	// Example: 1654173249
	CreatedAt int64 `json:"createdAt,omitempty"`

	// description
	// Example: this is a crypto cat
	Description string `json:"description,omitempty"`

	// group id
	// Example: 10
	GroupID int64 `json:"groupId,omitempty"`

	// name of the group
	// Example: group_abc
	GroupName string `json:"groupName,omitempty"`

	// id
	// Example: 100
	// Required: true
	ID *int64 `json:"id"`

	// bucket or object name
	// Example: helloworld
	// Required: true
	Name *string `json:"name"`

	// address of the owner
	// Example: 0x0BAC492386862aD3dF4B666Bc096b0505BB694Da
	OwnerAddress string `json:"ownerAddress,omitempty"`

	// price
	// Example: 12.34
	Price util.Decimal `json:"price,omitempty"`

	// bucket or object id
	// Example: 10
	ResourceID int64 `json:"resourceId,omitempty"`

	// status
	// Enum: [PENDING LISTED BLOCKED]
	Status string `json:"status,omitempty"`

	// all time trade times
	// Example: 10
	TotalSale int64 `json:"totalSale,omitempty"`

	// all time trade volume, in wei unit
	// Example: 290.68
	TotalVolume util.Decimal `json:"totalVolume,omitempty"`

	// type
	// Required: true
	// Enum: [COLLECTION OBJECT]
	Type *string `json:"type"`

	// url for image
	// Example: http://www.xx.xxx/xx.jpg
	URL string `json:"url,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Item) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if err := m.Price.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("price")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("price")
		}
		return err
	}

	return nil
}

var itemTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PENDING","LISTED","BLOCKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemTypeStatusPropEnum = append(itemTypeStatusPropEnum, v)
	}
}

const (

	// ItemStatusPENDING captures enum value "PENDING"
	ItemStatusPENDING string = "PENDING"

	// ItemStatusLISTED captures enum value "LISTED"
	ItemStatusLISTED string = "LISTED"

	// ItemStatusBLOCKED captures enum value "BLOCKED"
	ItemStatusBLOCKED string = "BLOCKED"
)

// prop value enum
func (m *Item) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Item) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateTotalVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalVolume) { // not required
		return nil
	}

	if err := m.TotalVolume.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("totalVolume")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("totalVolume")
		}
		return err
	}

	return nil
}

var itemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COLLECTION","OBJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemTypeTypePropEnum = append(itemTypeTypePropEnum, v)
	}
}

const (

	// ItemTypeCOLLECTION captures enum value "COLLECTION"
	ItemTypeCOLLECTION string = "COLLECTION"

	// ItemTypeOBJECT captures enum value "OBJECT"
	ItemTypeOBJECT string = "OBJECT"
)

// prop value enum
func (m *Item) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Item) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this item based on context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
