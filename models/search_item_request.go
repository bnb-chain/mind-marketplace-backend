// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchItemRequest search item request
//
// swagger:model SearchItemRequest
type SearchItemRequest struct {

	// filter
	Filter *ItemFilter `json:"filter,omitempty"`

	// limit
	// Maximum: 20
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// offset
	// Minimum: 0
	Offset *int64 `json:"offset,omitempty"`

	// sort
	// Enum: [CREATION_ASC CREATION_DESC TOTAL_VOLUME_ASC TOTAL_VOLUME_DESC TOTAL_SALE_ASC TOTAL_SALE_DESC]
	Sort *string `json:"sort,omitempty"`
}

// Validate validates this search item request
func (m *SearchItemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchItemRequest) validateFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *SearchItemRequest) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", m.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "body", m.Limit, 20, false); err != nil {
		return err
	}

	return nil
}

func (m *SearchItemRequest) validateOffset(formats strfmt.Registry) error {
	if swag.IsZero(m.Offset) { // not required
		return nil
	}

	if err := validate.MinimumInt("offset", "body", *m.Offset, 0, false); err != nil {
		return err
	}

	return nil
}

var searchItemRequestTypeSortPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATION_ASC","CREATION_DESC","TOTAL_VOLUME_ASC","TOTAL_VOLUME_DESC","TOTAL_SALE_ASC","TOTAL_SALE_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchItemRequestTypeSortPropEnum = append(searchItemRequestTypeSortPropEnum, v)
	}
}

const (

	// SearchItemRequestSortCREATIONASC captures enum value "CREATION_ASC"
	SearchItemRequestSortCREATIONASC string = "CREATION_ASC"

	// SearchItemRequestSortCREATIONDESC captures enum value "CREATION_DESC"
	SearchItemRequestSortCREATIONDESC string = "CREATION_DESC"

	// SearchItemRequestSortTOTALVOLUMEASC captures enum value "TOTAL_VOLUME_ASC"
	SearchItemRequestSortTOTALVOLUMEASC string = "TOTAL_VOLUME_ASC"

	// SearchItemRequestSortTOTALVOLUMEDESC captures enum value "TOTAL_VOLUME_DESC"
	SearchItemRequestSortTOTALVOLUMEDESC string = "TOTAL_VOLUME_DESC"

	// SearchItemRequestSortTOTALSALEASC captures enum value "TOTAL_SALE_ASC"
	SearchItemRequestSortTOTALSALEASC string = "TOTAL_SALE_ASC"

	// SearchItemRequestSortTOTALSALEDESC captures enum value "TOTAL_SALE_DESC"
	SearchItemRequestSortTOTALSALEDESC string = "TOTAL_SALE_DESC"
)

// prop value enum
func (m *SearchItemRequest) validateSortEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchItemRequestTypeSortPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchItemRequest) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortEnum("sort", "body", *m.Sort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this search item request based on the context it is used
func (m *SearchItemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchItemRequest) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {
		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchItemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchItemRequest) UnmarshalBinary(b []byte) error {
	var res SearchItemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
