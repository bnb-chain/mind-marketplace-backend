// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAccountRequest update account request
//
// swagger:model UpdateAccountRequest
type UpdateAccountRequest struct {

	// account address
	// Example: 0x0BAC492386862aD3dF4B666Bc096b0505BB694Da
	// Required: true
	Address *string `json:"address"`

	// self description
	// Example: interested in web3
	// Max Length: 1024
	// Min Length: 0
	Bio *string `json:"bio,omitempty"`

	// instagram user name
	// Example: justdoit
	// Max Length: 256
	// Min Length: 3
	InstagramUserName string `json:"instagramUserName,omitempty"`

	// signature, format `{accountName}_update_account_{timestamp}`, signed with account seed
	// Example: b6c68a22f98c5f37347f7e2d4dc6ee48df31d5b86ef123d984969432f14c9a970283a157ef260b6341215b76764a1d5d4b29379fc50359164b53c2ce16d4cbd7
	// Required: true
	Signature *string `json:"signature"`

	// unix timestamp
	// Example: 1654171400
	// Required: true
	Timestamp *int64 `json:"timestamp"`

	// twitter user name
	// Example: jsutdoit
	// Max Length: 256
	// Min Length: 3
	TwitterUserName string `json:"twitterUserName,omitempty"`
}

// Validate validates this update account request
func (m *UpdateAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstagramUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwitterUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccountRequest) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateBio(formats strfmt.Registry) error {
	if swag.IsZero(m.Bio) { // not required
		return nil
	}

	if err := validate.MinLength("bio", "body", *m.Bio, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("bio", "body", *m.Bio, 1024); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateInstagramUserName(formats strfmt.Registry) error {
	if swag.IsZero(m.InstagramUserName) { // not required
		return nil
	}

	if err := validate.MinLength("instagramUserName", "body", m.InstagramUserName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("instagramUserName", "body", m.InstagramUserName, 256); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccountRequest) validateTwitterUserName(formats strfmt.Registry) error {
	if swag.IsZero(m.TwitterUserName) { // not required
		return nil
	}

	if err := validate.MinLength("twitterUserName", "body", m.TwitterUserName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("twitterUserName", "body", m.TwitterUserName, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update account request based on context it is used
func (m *UpdateAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAccountRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
