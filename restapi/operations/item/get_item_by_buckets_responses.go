// Code generated by go-swagger; DO NOT EDIT.

package item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bnb-chain/mind-marketplace-backend/models"
)

// GetItemByBucketsOKCode is the HTTP code returned for type GetItemByBucketsOK
const GetItemByBucketsOKCode int = 200

/*GetItemByBucketsOK successful operation

swagger:response getItemByBucketsOK
*/
type GetItemByBucketsOK struct {

	/*
	  In: Body
	*/
	Payload *models.BatchItemResponse `json:"body,omitempty"`
}

// NewGetItemByBucketsOK creates GetItemByBucketsOK with default headers values
func NewGetItemByBucketsOK() *GetItemByBucketsOK {

	return &GetItemByBucketsOK{}
}

// WithPayload adds the payload to the get item by buckets o k response
func (o *GetItemByBucketsOK) WithPayload(payload *models.BatchItemResponse) *GetItemByBucketsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get item by buckets o k response
func (o *GetItemByBucketsOK) SetPayload(payload *models.BatchItemResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetItemByBucketsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetItemByBucketsBadRequestCode is the HTTP code returned for type GetItemByBucketsBadRequest
const GetItemByBucketsBadRequestCode int = 400

/*GetItemByBucketsBadRequest Bad Request

swagger:response getItemByBucketsBadRequest
*/
type GetItemByBucketsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetItemByBucketsBadRequest creates GetItemByBucketsBadRequest with default headers values
func NewGetItemByBucketsBadRequest() *GetItemByBucketsBadRequest {

	return &GetItemByBucketsBadRequest{}
}

// WithPayload adds the payload to the get item by buckets bad request response
func (o *GetItemByBucketsBadRequest) WithPayload(payload *models.Error) *GetItemByBucketsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get item by buckets bad request response
func (o *GetItemByBucketsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetItemByBucketsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetItemByBucketsInternalServerErrorCode is the HTTP code returned for type GetItemByBucketsInternalServerError
const GetItemByBucketsInternalServerErrorCode int = 500

/*GetItemByBucketsInternalServerError internal server error

swagger:response getItemByBucketsInternalServerError
*/
type GetItemByBucketsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetItemByBucketsInternalServerError creates GetItemByBucketsInternalServerError with default headers values
func NewGetItemByBucketsInternalServerError() *GetItemByBucketsInternalServerError {

	return &GetItemByBucketsInternalServerError{}
}

// WithPayload adds the payload to the get item by buckets internal server error response
func (o *GetItemByBucketsInternalServerError) WithPayload(payload *models.Error) *GetItemByBucketsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get item by buckets internal server error response
func (o *GetItemByBucketsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetItemByBucketsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
