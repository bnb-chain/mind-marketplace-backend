// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/bnb-chain/mind-marketplace-backend/util"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Purchase purchase
//
// swagger:model Purchase
type Purchase struct {

	// account address
	// Example: 0x0BAC492386862aD3dF4B666Bc096b0505BB694Da
	// Required: true
	BuyerAddress *string `json:"buyerAddress"`

	// created at,unix timestamp
	// Example: 1654176354
	CreatedAt int64 `json:"createdAt,omitempty"`

	// id
	// Example: 100
	// Required: true
	ID *int64 `json:"id"`

	// item
	Item *Item `json:"item,omitempty"`

	// price
	// Example: 12.34
	Price util.Decimal `json:"price,omitempty"`
}

// Validate validates this purchase
func (m *Purchase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Purchase) validateBuyerAddress(formats strfmt.Registry) error {

	if err := validate.Required("buyerAddress", "body", m.BuyerAddress); err != nil {
		return err
	}

	return nil
}

func (m *Purchase) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Purchase) validateItem(formats strfmt.Registry) error {
	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

func (m *Purchase) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if err := m.Price.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("price")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("price")
		}
		return err
	}

	return nil
}

// ContextValidate validate this purchase based on the context it is used
func (m *Purchase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Purchase) contextValidateItem(ctx context.Context, formats strfmt.Registry) error {

	if m.Item != nil {
		if err := m.Item.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Purchase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Purchase) UnmarshalBinary(b []byte) error {
	var res Purchase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
